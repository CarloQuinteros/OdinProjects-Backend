// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User{
  id String @id @default(uuid())
  age Int
  name String
  email String  @unique
  role Role @default(BASIC)
  //isAdmin Boolean
  //largeNumber BigInt
  //post Post[]/// may post relationships 1 to many
  writtenPosts Post[]     @relation("writtenPosts")
  favoritePosts Post[]    @relation("favoritePosts")
  userPreference UserPreference?

  @@unique([age,name])
  @@index([email])
}

model UserPreference{
   id String @id @default(uuid())
   emailUpdates Boolean
   user User @relation(fields: [userId],references: [id])
   userId String @unique
}

model Post {
  id String @id @default(uuid())
  title String
  rating Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  //preferences Json
  //blob Bytes
  userId String
  author User @relation("writtenPosts", fields: [userId],references: [id])
  favoriteById String?
  favoriteBy User? @relation("favoritePosts",fields: [favoriteById],references: [id])
  categories category[] // relation many to many with post
}

model category{
  id String @id @default(uuid())
  name String
  posts Post[] // relation many to many with post
}


enum Role{
  BASIC
  ADMIN
}